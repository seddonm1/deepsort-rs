use criterion::{black_box, criterion_group, criterion_main, Criterion};
use deepsort_rs::*;

fn make_detections() -> Vec<Vec<Detection>> {
    let detections: Vec<Vec<Vec<f32>>> = vec![
        vec![
            vec![1452.0, 32.0, 79.0, 155.0],
            vec![1648.0, 119.0, 68.0, 170.0],
            vec![801.0, 243.0, 55.0, 179.0],
            vec![1604.0, 611.0, 112.0, 251.0],
            vec![248.0, 787.0, 135.0, 293.0],
            vec![880.0, 77.0, 62.0, 154.0],
            vec![1349.0, 16.0, 52.0, 115.0],
            vec![1570.0, 910.0, 153.0, 170.0],
            vec![1322.0, 0.0, 41.0, 50.0],
            vec![712.0, 227.0, 73.0, 183.0],
            vec![987.0, 2.0, 45.0, 124.0],
            vec![1154.0, 0.0, 42.0, 76.0],
            vec![1798.0, 175.0, 67.0, 198.0],
            vec![287.0, 297.0, 83.0, 184.0],
            vec![865.0, 394.0, 120.0, 193.0],
            vec![1232.0, 0.0, 30.0, 15.0],
        ],
        vec![
            vec![1455.0, 31.0, 76.0, 156.0],
            vec![1604.0, 612.0, 111.0, 250.0],
            vec![804.0, 241.0, 55.0, 179.0],
            vec![1648.0, 119.0, 67.0, 169.0],
            vec![1571.0, 913.0, 148.0, 167.0],
            vec![242.0, 788.0, 123.0, 292.0],
            vec![862.0, 396.0, 113.0, 185.0],
            vec![882.0, 74.0, 61.0, 158.0],
            vec![1352.0, 14.0, 53.0, 116.0],
            vec![988.0, 1.0, 46.0, 125.0],
            vec![1323.0, 0.0, 41.0, 50.0],
            vec![1154.0, 0.0, 41.0, 77.0],
            vec![1800.0, 175.0, 67.0, 181.0],
            vec![719.0, 221.0, 69.0, 188.0],
            vec![1231.0, 0.0, 35.0, 15.0],
            vec![282.0, 298.0, 77.0, 185.0],
        ],
        vec![
            vec![1455.0, 31.0, 76.0, 156.0],
            vec![1604.0, 613.0, 111.0, 249.0],
            vec![804.0, 241.0, 55.0, 179.0],
            vec![1648.0, 119.0, 67.0, 169.0],
            vec![1572.0, 913.0, 147.0, 167.0],
            vec![239.0, 786.0, 131.0, 293.0],
            vec![862.0, 396.0, 112.0, 186.0],
            vec![882.0, 74.0, 61.0, 159.0],
            vec![988.0, 1.0, 46.0, 125.0],
            vec![1352.0, 14.0, 53.0, 117.0],
            vec![1323.0, 0.0, 41.0, 49.0],
            vec![1154.0, 0.0, 41.0, 77.0],
            vec![1800.0, 175.0, 67.0, 181.0],
            vec![719.0, 221.0, 68.0, 187.0],
            vec![1231.0, 0.0, 35.0, 15.0],
            vec![282.0, 298.0, 76.0, 185.0],
        ],
        vec![
            vec![1455.0, 31.0, 76.0, 156.0],
            vec![1604.0, 613.0, 111.0, 249.0],
            vec![804.0, 241.0, 55.0, 179.0],
            vec![1648.0, 119.0, 67.0, 169.0],
            vec![1572.0, 913.0, 147.0, 167.0],
            vec![239.0, 786.0, 131.0, 293.0],
            vec![862.0, 396.0, 112.0, 186.0],
            vec![882.0, 74.0, 61.0, 158.0],
            vec![988.0, 1.0, 46.0, 125.0],
            vec![1352.0, 14.0, 53.0, 117.0],
            vec![1323.0, 0.0, 41.0, 49.0],
            vec![1154.0, 0.0, 41.0, 77.0],
            vec![1800.0, 175.0, 67.0, 181.0],
            vec![719.0, 221.0, 68.0, 187.0],
            vec![1231.0, 0.0, 35.0, 15.0],
            vec![282.0, 298.0, 77.0, 185.0],
        ],
        vec![
            vec![1601.0, 613.0, 114.0, 248.0],
            vec![1456.0, 30.0, 78.0, 156.0],
            vec![1648.0, 119.0, 67.0, 163.0],
            vec![807.0, 240.0, 58.0, 180.0],
            vec![1573.0, 917.0, 148.0, 163.0],
            vec![230.0, 792.0, 125.0, 288.0],
            vec![861.0, 395.0, 110.0, 210.0],
            vec![1800.0, 174.0, 70.0, 176.0],
            vec![1322.0, 0.0, 39.0, 50.0],
            vec![883.0, 74.0, 60.0, 151.0],
            vec![1357.0, 13.0, 52.0, 115.0],
            vec![989.0, 0.0, 47.0, 125.0],
            vec![1155.0, 0.0, 38.0, 77.0],
            vec![721.0, 219.0, 68.0, 188.0],
            vec![276.0, 296.0, 79.0, 189.0],
            vec![1229.0, 0.0, 42.0, 15.0],
            vec![299.0, 236.0, 82.0, 177.0],
            vec![1833.0, 275.0, 44.0, 69.0],
        ],
        vec![
            vec![1599.0, 614.0, 116.0, 248.0],
            vec![1458.0, 30.0, 76.0, 156.0],
            vec![223.0, 794.0, 116.0, 286.0],
            vec![1648.0, 119.0, 66.0, 163.0],
            vec![858.0, 398.0, 106.0, 227.0],
            vec![1579.0, 924.0, 141.0, 156.0],
            vec![811.0, 240.0, 66.0, 180.0],
            vec![884.0, 71.0, 60.0, 158.0],
            vec![1322.0, 0.0, 39.0, 48.0],
            vec![1154.0, 0.0, 40.0, 77.0],
            vec![1361.0, 11.0, 52.0, 105.0],
            vec![1800.0, 178.0, 71.0, 162.0],
            vec![988.0, 0.0, 51.0, 126.0],
            vec![267.0, 299.0, 85.0, 190.0],
            vec![724.0, 218.0, 73.0, 190.0],
            vec![305.0, 235.0, 73.0, 179.0],
            vec![632.0, 992.0, 196.0, 88.0],
            vec![1230.0, 0.0, 45.0, 14.0],
        ],
        vec![
            vec![1599.0, 617.0, 117.0, 246.0],
            vec![852.0, 399.0, 108.0, 233.0],
            vec![1460.0, 29.0, 74.0, 158.0],
            vec![1648.0, 118.0, 66.0, 164.0],
            vec![812.0, 240.0, 71.0, 179.0],
            vec![887.0, 71.0, 60.0, 156.0],
            vec![1366.0, 11.0, 52.0, 104.0],
            vec![1323.0, 0.0, 38.0, 48.0],
            vec![1152.0, 0.0, 41.0, 77.0],
            vec![725.0, 217.0, 74.0, 188.0],
            vec![1582.0, 935.0, 138.0, 145.0],
            vec![262.0, 306.0, 90.0, 185.0],
            vec![214.0, 801.0, 121.0, 279.0],
            vec![1800.0, 176.0, 73.0, 155.0],
            vec![989.0, 0.0, 53.0, 124.0],
            vec![308.0, 236.0, 68.0, 176.0],
            vec![641.0, 989.0, 176.0, 91.0],
            vec![1832.0, 280.0, 46.0, 60.0],
            vec![1231.0, 0.0, 44.0, 14.0],
        ],
        vec![
            vec![1599.0, 623.0, 118.0, 248.0],
            vec![1649.0, 116.0, 65.0, 165.0],
            vec![1457.0, 30.0, 80.0, 156.0],
            vec![812.0, 239.0, 71.0, 178.0],
            vec![888.0, 72.0, 62.0, 155.0],
            vec![1369.0, 7.0, 55.0, 106.0],
            vec![1152.0, 0.0, 41.0, 76.0],
            vec![1322.0, 0.0, 38.0, 47.0],
            vec![844.0, 405.0, 120.0, 236.0],
            vec![727.0, 217.0, 76.0, 187.0],
            vec![209.0, 817.0, 128.0, 262.0],
            vec![1802.0, 179.0, 75.0, 160.0],
            vec![991.0, 0.0, 52.0, 124.0],
            vec![260.0, 313.0, 89.0, 174.0],
            vec![309.0, 226.0, 69.0, 184.0],
            vec![647.0, 985.0, 156.0, 95.0],
            vec![1575.0, 938.0, 147.0, 142.0],
        ],
        vec![
            vec![1601.0, 630.0, 117.0, 242.0],
            vec![1649.0, 115.0, 65.0, 164.0],
            vec![1458.0, 30.0, 79.0, 156.0],
            vec![815.0, 236.0, 70.0, 180.0],
            vec![891.0, 72.0, 60.0, 154.0],
            vec![732.0, 217.0, 74.0, 189.0],
            vec![1150.0, 0.0, 42.0, 77.0],
            vec![835.0, 411.0, 121.0, 228.0],
            vec![1321.0, 0.0, 39.0, 47.0],
            vec![1802.0, 178.0, 76.0, 135.0],
            vec![204.0, 827.0, 133.0, 252.0],
            vec![1374.0, 7.0, 54.0, 103.0],
            vec![650.0, 979.0, 154.0, 101.0],
            vec![253.0, 318.0, 96.0, 181.0],
            vec![991.0, 0.0, 52.0, 125.0],
            vec![309.0, 234.0, 70.0, 177.0],
            vec![1828.0, 284.0, 49.0, 57.0],
            vec![1583.0, 950.0, 131.0, 130.0],
            vec![1236.0, 0.0, 37.0, 13.0],
        ],
        vec![
            vec![1601.0, 630.0, 117.0, 241.0],
            vec![1649.0, 115.0, 65.0, 164.0],
            vec![1458.0, 30.0, 79.0, 156.0],
            vec![815.0, 236.0, 71.0, 180.0],
            vec![891.0, 72.0, 60.0, 154.0],
            vec![732.0, 218.0, 74.0, 188.0],
            vec![836.0, 411.0, 120.0, 228.0],
            vec![1150.0, 0.0, 42.0, 77.0],
            vec![1321.0, 0.0, 39.0, 47.0],
            vec![1802.0, 178.0, 76.0, 134.0],
            vec![204.0, 827.0, 132.0, 252.0],
            vec![1374.0, 7.0, 54.0, 103.0],
            vec![650.0, 980.0, 153.0, 100.0],
            vec![253.0, 318.0, 96.0, 180.0],
            vec![991.0, 0.0, 52.0, 125.0],
            vec![309.0, 234.0, 70.0, 177.0],
            vec![1828.0, 284.0, 49.0, 57.0],
            vec![1583.0, 950.0, 132.0, 130.0],
            vec![1236.0, 0.0, 38.0, 13.0],
        ],
        vec![
            vec![1600.0, 635.0, 118.0, 232.0],
            vec![1649.0, 114.0, 65.0, 161.0],
            vec![1459.0, 29.0, 77.0, 157.0],
            vec![834.0, 413.0, 115.0, 234.0],
            vec![893.0, 71.0, 61.0, 154.0],
            vec![818.0, 234.0, 67.0, 182.0],
            vec![199.0, 833.0, 137.0, 246.0],
            vec![1803.0, 177.0, 79.0, 133.0],
            vec![1378.0, 4.0, 54.0, 112.0],
            vec![1321.0, 0.0, 41.0, 46.0],
            vec![737.0, 216.0, 72.0, 190.0],
            vec![1150.0, 0.0, 42.0, 79.0],
            vec![316.0, 223.0, 66.0, 189.0],
            vec![650.0, 976.0, 155.0, 103.0],
            vec![247.0, 320.0, 94.0, 179.0],
            vec![993.0, 0.0, 50.0, 126.0],
            vec![1237.0, 0.0, 37.0, 13.0],
            vec![1829.0, 284.0, 48.0, 57.0],
        ],
    ];

    detections
        .iter()
        .map(|detections| {
            detections
                .iter()
                .map(|d| {
                    Detection::new(
                        BoundingBox::new(d[0], d[1], d[2], d[3]),
                        1.0,
                        None,
                        None,
                        None,
                    )
                })
                .collect::<Vec<Detection>>()
        })
        .collect::<Vec<Vec<Detection>>>()
}

fn criterion_benchmark(c: &mut Criterion) {
    c.bench_function("tracker", |b| {
        let mut tracker = Tracker::default();

        let detections = make_detections();

        // seed the tracker
        for i in 0..10 {
            let step_detections = detections.get(i).unwrap();
            tracker.predict();
            tracker.update(step_detections);
        }
        let bench_detections = detections.get(10).unwrap();

        // run the benchmark
        b.iter(|| {
            tracker.predict();
            tracker.update(black_box(bench_detections));
        });
    });
}

criterion_group!(benches, criterion_benchmark);
criterion_main!(benches);
